package fitbit

import (
	"context"
	"fmt"
	"net/http"
)

type Devices []Device

// generated by json-to-go
type Device struct {
	Battery       string        `json:"battery"`
	BatteryLevel  int           `json:"batteryLevel"`
	DeviceVersion string        `json:"deviceVersion"`
	Features      []interface{} `json:"features"`
	ID            string        `json:"id"`
	LastSyncTime  string        `json:"lastSyncTime"`
	Mac           string        `json:"mac"`
	Type          string        `json:"type"`
}

func (api *Client) GetDevices() (*Devices, *Response, error) {
	return api.GetDevicesContext(context.Background())
}

func (api *Client) GetDevicesContext(ctx context.Context) (*Devices, *Response, error) {
	var m Devices
	req, err := GetDevicesRequest(ctx)
	if err != nil {
		return nil, nil, err
	}
	resp, err := api.do_request(req, &m)
	return &m, resp, err
}

func GetDevices(c *Client) (*Devices, error) {
	return GetDevicesContext(context.Background(), c)
}

func GetDevicesContext(ctx context.Context, c *Client) (*Devices, error) {
	m, _, err := c.GetDevicesContext(ctx)
	return m, err
}

func GetDevicesRequest(ctx context.Context) (*http.Request, error) {
	return http.NewRequestWithContext(ctx, "GET", "https://api.fitbit.com/1/user/-/devices.json", nil)
}

type Alarms struct {
	TrackerAlarms []Alarm `json:"trackerAlarms"`
}

type Alarm struct {
	AlarmID        int           `json:"alarmId"`
	Deleted        bool          `json:"deleted"`
	Enabled        bool          `json:"enabled"`
	Recurring      bool          `json:"recurring"`
	SnoozeCount    int           `json:"snoozeCount"`
	SnoozeLength   int           `json:"snoozeLength"`
	SyncedToDevice bool          `json:"syncedToDevice"`
	Time           string        `json:"time"`
	Vibe           string        `json:"vibe"`
	WeekDays       []interface{} `json:"weekDays"`
}

type GetAlarmsParam struct {
	TrackerID string
}

func (api *Client) GetAlarms(param *GetAlarmsParam) (*Alarms, *Response, error) {
	return api.GetAlaramsContext(context.Background(), param)
}

func (api *Client) GetAlaramsContext(ctx context.Context, param *GetAlarmsParam) (*Alarms, *Response, error) {
	var m Alarms
	req, err := GetAlarmsRequest(ctx, param)
	if err != nil {
		return nil, nil, err
	}
	resp, err := api.do_request(req, &m)
	return &m, resp, err
}

func GetAlarams(c *Client, param *GetAlarmsParam) (*Alarms, error) {
	return GetAlaramsContext(context.Background(), c, param)
}

func GetAlaramsContext(ctx context.Context, c *Client, param *GetAlarmsParam) (*Alarms, error) {
	m, _, err := c.GetAlaramsContext(ctx, param)
	return m, err
}

// GetAlarms is based on GET https://api.fitbit.com/1/user/[user-id]/devices/tracker/[tracker-id]/alarms.json
func GetAlarmsRequest(ctx context.Context, param *GetAlarmsParam) (*http.Request, error) {
	url := fmt.Sprintf("https://api.fitbit.com/1/user/-/devices/tracker/%s/alarms.json", param.TrackerID)
	return http.NewRequestWithContext(ctx, "GET", url, nil)
}
